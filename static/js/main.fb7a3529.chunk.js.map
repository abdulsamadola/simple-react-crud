{"version":3,"sources":["components/home.js","components/adduser.js","components/edit.js","components/main.js","components/App.js","serviceWorker.js","index.js"],"names":["USERS_DATA","mainComponent","require","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteUsers","deleteUsersHandler","deleteUser","userid","findI","state","userData","findIndex","id","useDataRaw","toConsumableArray","slice","concat","AsyncStorage","setItem","JSON","stringify","setState","editUser","history","push","isLoading","searchword","_onClick","bind","assertThisInitialized","getItem","dataRequest","parse","alert","_context","t0","event","_this2","target","value","ideas","filter","idea","name","_this3","react_default","a","createElement","style","padding","flex","class","className","type","onKeyUp","handleSearch","placeholder","aria-label","onClick","length","role","aria-valuenow","aria-valuemin","aria-valuemax","width","scope","map","user","email","phoneNumber","PureComponent","uuid","addUserComponent","goBack","onSubmit","userDataStore","storeData","updateInput","removeItem","userStorage","then","defineProperty","onChange","aria-describedby","userUpdate","findII","index","match","params","idi","item","chosenUser","Main","Switch","Route","exact","path","component","Home","AddUser","EditUser","App","main","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","BrowserRouter","basename","components_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fb7a3529.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nconst USERS_DATA = 'users_data'\r\n//var Confirm = require('react-confirm-bootstrap');\r\nconst Confirm = require('react-confirm-bootstrap');\r\nclass mainComponent extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userData: [],\r\n            isLoading: true,\r\n            searchword: ''\r\n        }\r\n        this._onClick = this._onClick.bind(this);\r\n    }\r\n\r\n\r\n    deleteUsers = () => {\r\n        this.deleteUsersHandler()\r\n    }\r\n    deleteUsersHandler() {\r\n        const useDataRaw = [\r\n        ]\r\n        AsyncStorage.setItem(USERS_DATA, JSON.stringify(useDataRaw));\r\n        this.setState({\r\n            userData: useDataRaw\r\n        })\r\n    }\r\n    deleteUser = (userid) => {\r\n        const findI = this.state.userData.findIndex((id) => {\r\n            return id.id === userid\r\n        })\r\n\r\n        const useDataRaw = [\r\n            ...this.state.userData.slice(0, findI),\r\n            ...this.state.userData.slice(findI + 1)\r\n        ]\r\n        AsyncStorage.setItem(USERS_DATA, JSON.stringify(useDataRaw));\r\n        this.setState({\r\n            userData: useDataRaw\r\n        })\r\n    }\r\n    editUser = (userid) => {\r\n        this.props.history.push(`/edit/${userid}`);\r\n    }\r\n    async componentDidMount() {\r\n        try {\r\n            const dataRequest = await AsyncStorage.getItem(USERS_DATA)\r\n            if (dataRequest) {\r\n                this.setState({\r\n                    userData: JSON.parse(dataRequest),\r\n                    isLoading: false\r\n\r\n                })\r\n            }\r\n        } catch (error) {\r\n            alert('something wrong' + error)\r\n        }\r\n    }\r\n    handleSearch(event) {\r\n        this.setState({\r\n            searchword: event.target.value\r\n        })\r\n        let ideas = this.state.userData.filter((idea) => {\r\n\r\n            // return idea.toLowerCase().search(\r\n            //   event.target.value.toLowerCase()) !== -1;\r\n            //   event.target.value.toLowerCase()) !== -1;\r\n\r\n            //  return idea.name.includes(event.target.value.toLowerCase()) || idea.email.includes(event.target.value.toLowerCase()) || idea.phoneNumber.includes(event.target.value.toLowerCase())\r\n            return idea.name === this.state.searchword;\r\n\r\n        });\r\n\r\n        this.setState({\r\n            userData: ideas\r\n        })\r\n\r\n    }\r\n\r\n    _onClick() {\r\n        this.props.history.push(`/adduser`);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n\r\n            <div style={{ padding: 10, flex: 1 }}>\r\n                <h1><span class=\"badge badge-secondary\">Simple React CRUD </span></h1>\r\n\r\n                <div className=\"card\" >\r\n                    <div className=\"card-header\">\r\n                        <form class=\"form-inline my-10 my-lg-0\">\r\n                            <input className=\"form-control mr-sm-2\" type=\"search\" onKeyUp={this.handleSearch.bind(this)} placeholder=\"Search\" aria-label=\"Search\" />\r\n                        </form>\r\n                        <button type=\"button\" className=\"btn btn-success m-2\" onClick={this._onClick}>\r\n                            Add new user\r\n                        </button>\r\n\r\n\r\n                        <button type=\"button\" className=\"btn btn-danger m-2\" onClick={() => { this.deleteUsers() }}>\r\n                            Delete all users\r\n                        </button>\r\n\r\n                        <button type=\"button\" className=\"btn btn-primary\">\r\n                            Total <span className=\"badge badge-light\">{this.state.userData.length}</span>\r\n                        </button>\r\n                    </div>\r\n                    {this.state.isLoading && <div className=\"progress\">\r\n                        <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" aria-valuenow=\"100\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: '100%' }}></div>\r\n                    </div>}\r\n                    <div class=\"rptable table-responsive\">\r\n                        <table class=\"table table-striped\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope=\"col\">Name</th>\r\n                                    <th scope=\"col\">Email</th>\r\n                                    <th scope=\"col\">Phone Number</th>\r\n                                    <th scope=\"col\">Actions</th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n\r\n\r\n                                {this.state.userData.map((user) => (\r\n                                    <tr>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.phoneNumber}</td>\r\n                                        <td>\r\n                                            <button type=\"button\" className=\"btn btn-primary m-2\" onClick={() => this.editUser(user.id)}>Edit</button>\r\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => this.deleteUser(user.id)}>Delete</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default mainComponent;","import React, { PureComponent } from 'react';\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nconst USERS_DATA = 'users_data'\r\nconst uuid = require('uuidv4');\r\nclass addUserComponent extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            userData: []\r\n        }\r\n        this.updateInput = this.updateInput.bind(this);\r\n    }\r\n    async deleteUsers() {\r\n        try {\r\n            await AsyncStorage.removeItem(USERS_DATA)\r\n            alert(' was successful!');\r\n        } catch (error) {\r\n            alert('something went  wrong' + error);\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const dataRequest = await AsyncStorage.getItem(USERS_DATA)\r\n            if (dataRequest) {\r\n                this.setState({\r\n                    userData: JSON.parse(dataRequest)\r\n                })\r\n            }\r\n        } catch (error) {\r\n            alert('something wrong')\r\n        }\r\n    }\r\n    async storeData(userDataStore) {\r\n\r\n        const userStorage = this.state.userData\r\n        userStorage.push(userDataStore)\r\n        AsyncStorage.setItem(USERS_DATA, JSON.stringify(userStorage))\r\n            .then(() => this.props.history.goBack()\r\n            )\r\n        this.setState({\r\n            userData: userStorage,\r\n        })\r\n    }\r\n\r\n\r\n    updateInput(event) {\r\n\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n\r\n    }\r\n    _onClick = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    onSubmit = () => {\r\n        const userDataStore = {\r\n            id: uuid(),\r\n            name: this.state.name,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email\r\n        }\r\n        this.storeData(userDataStore);\r\n    }\r\n    render() {\r\n        return (\r\n            <div style={{ padding: 10, flex: 1 }}>\r\n                <h1><span class=\"badge badge-secondary\">Simple React CRUD </span></h1>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <button type=\"button\" onClick={this._onClick.bind(this)} className=\"btn btn-danger\">\r\n                            Go back                        </button>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Add new user</h5>\r\n                        <form>\r\n                            <div className=\"input-group mb-3\">\r\n\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Name</span>\r\n                                </div>\r\n                                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Email</span>\r\n                                </div>\r\n                                <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Phone Number</span>\r\n                                </div>\r\n                                <input type=\"tel\" name=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <button onClick={this.onSubmit} type=\"button\" className=\"btn btn-success\" >Submit</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default addUserComponent;","import React, { PureComponent } from 'react';\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nconst USERS_DATA = 'users_data'\r\nclass addUserComponent extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            index: '',\r\n            name: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            userData: []\r\n        }\r\n        this.updateInput = this.updateInput.bind(this);\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const dataRequest = await AsyncStorage.getItem(USERS_DATA)\r\n            if (dataRequest) {\r\n                this.setState({\r\n                    userData: JSON.parse(dataRequest)\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n            alert('something wrong' + error)\r\n        }\r\n        const idi = this.props.match.params.id;\r\n        const findI = this.state.userData.findIndex(item => {\r\n            return item.id === idi\r\n        })\r\n        const chosenUser = this.state.userData[findI]\r\n        this.setState({\r\n            index: findI,\r\n            name: chosenUser.name,\r\n            phoneNumber: chosenUser.phoneNumber,\r\n            email: chosenUser.email\r\n        })\r\n\r\n    }\r\n    userUpdate = () => {\r\n\r\n        const userDataStore = {\r\n            id: this.state.id,\r\n            name: this.state.name,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email\r\n        }\r\n        const findII = this.state.index\r\n        const useDataRaw = [\r\n            ...this.state.userData.slice(0, findII),\r\n            userDataStore,\r\n            ...this.state.userData.slice(findII + 1)\r\n        ]\r\n\r\n        AsyncStorage.setItem(USERS_DATA, JSON.stringify(useDataRaw));\r\n        this.setState({\r\n            userData: useDataRaw\r\n        })\r\n\r\n        alert('User successfully updated!')\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    updateInput(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value,\r\n        });\r\n\r\n    }\r\n    _onClick = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ padding: 10, flex: 1 }}>\r\n                <h1><span class=\"badge badge-secondary\">Simple React CRUD </span></h1>\r\n\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <button type=\"button\" onClick={this._onClick.bind(this)} className=\"btn btn-danger\">\r\n                            Go back\r\n                                    </button>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">Update user</h5>\r\n                        <form>\r\n                            <div className=\"input-group mb-3\">\r\n\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Name</span>\r\n                                </div>\r\n                                <input type=\"text\" name=\"name\" value={this.state.name} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Email</span>\r\n                                </div>\r\n                                <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <div className=\"input-group mb-3\">\r\n                                <div className=\"input-group-prepend\">\r\n                                    <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">Phone Number</span>\r\n                                </div>\r\n                                <input type=\"tel\" name=\"phoneNumber\" value={this.state.phoneNumber} onChange={this.updateInput} className=\"form-control\" aria-label=\"Sizing example input\" aria-describedby=\"inputGroup-sizing-default\" />\r\n                            </div>\r\n                            <button onClick={this.userUpdate} type=\"button\" className=\"btn btn-success\" >Update</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default addUserComponent;","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Home from './home'\r\nimport AddUser from './adduser'\r\nimport EditUser from './edit'\r\n//import Schedule from './Schedule'\r\n\r\n// The Main component renders one of the three provided\r\n// Routes (provided that one matches). Both the /roster\r\n// and /schedule routes will match any pathname that starts\r\n// with /roster or /schedule. The / route will only match\r\n// when the pathname is exactly the string \"/\"\r\nconst Main = () => (\r\n    <main>\r\n        <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/adduser' component={AddUser} />\r\n            <Route path='/edit/:id' component={EditUser} />\r\n        </Switch>\r\n    </main>\r\n)\r\n\r\nexport default Main\r\n","import React from 'react'\r\nimport Main from './main'\r\n\r\nconst App = () => (\r\n    <div>\r\n        <Main />\r\n    </div>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App'\nimport serviceWorker from './serviceWorker'\nReactDOM.render(<BrowserRouter basename=\"/App\" >\n    <App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker();"],"sourceRoot":""}